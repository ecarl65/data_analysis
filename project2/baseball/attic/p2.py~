# Imports
from __future__ import division, print_function
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import pdb

# Read input files
batting = pd.read_csv('Batting.csv')
master = pd.read_csv('Master.csv')
app = pd.read_csv('Appearances.csv')

# Make the master be indexed by the player id, after verifying that they are truly unique
masterLen = len(master)
uniqIdLen = len(master.playerID.unique())
if masterLen == uniqIdLen:
    print("Master now indexed by playerID")
    masterNew = master.set_index('playerID')
else:
   Print("Could not index master by player ID")


# Compute batting average
batting['AV'] = batting['H'] / (batting['AB'] + 1e-15)

# # Create table with entries from last 20 years
# batting_recent = batting[batting.yearID > 1994]
# batting_recent.describe()
# 
# # Find maximum HRs
# maxhridx = batting_recent['HR'].idxmax()
# maxHr = batting_recent['HR'].max()
# batting_recent.loc[maxhridx]
# maxHrPlayerFirst = master.loc[master['playerID'] == batting_recent.loc[maxhridx].playerID].nameFirst.values[0]
# maxHrPlayerLast = master.loc[master['playerID'] == batting_recent.loc[maxhridx].playerID].nameLast.values[0]
# maxHrYear = batting_recent.loc[maxhridx].yearID
# print("Player with max HR: {0} {1} in {2} with {3}".format(maxHrPlayerFirst, maxHrPlayerLast, maxHrYear, maxHr))

# Determine year quantiles
numBins = 25
num_quantiles = 3
minAtBats = 25

increment = 1.0 / num_quantiles
batting_ab = batting[batting.AB > minAtBats]
year_quantile = [(batting_ab['yearID'].quantile(increment * x), 
                  batting_ab['yearID'].quantile(increment * (x+1))) 
                  for x in xrange(num_quantiles)]
yq = [x[0] for x in year_quantile]
yq.append(year_quantile[-1][-1])

# Group by year quantiles
batting_gb = batting_ab.groupby(pd.cut(batting_ab['yearID'], yq))
# print(batting_gb.AV.describe())
# print(batting_gb.AV.std())

# Plot standard deviation for batting average over year quantiles
plt.figure()
batting_gb.AV.std().plot()
plt.title('Standard Deviation of Batting Average')
plt.xlabel('Year Range')
plt.ylabel('Standard Deviation')

# Plot histograms for batting average for quantiles
plt.figure()
bins = np.linspace(0.0, 0.5, num=numBins, endpoint=True)
x = (bins[:-1] + bins[1:]) / 2.0
# res = batting_gb.AV.hist(bins=bins)  # Can modify res somehow to make lines?
for (group, df) in batting_gb:
    hist, bin_edges = np.histogram(df.AV, bins=bins, density=True)
    plt.plot(x, hist, alpha = 0.75)
    plt.hold(True)
plt.title('Batting Average Histogram per Year Quantile')
legend = ['First', 'Second', 'Third', 'Fourth', 'Fifth', 'Sixth']
plt.legend(legend[:num_quantiles])

# Plot 

# Function to return if player is first base (2), short stop (1), or none (0)
def first_or_short(playerID, appearance):
    # first_base = appearance[appearance.playerID == playerID].G_1b.sum()
    # shortstop = appearance[appearance.playerID == playerID].G_ss.sum()
    rc = 0  # Default if first base and short stop are equal (including both 0)
    try:
        first_base = appearance.loc[playerID].G_1b
        shortstop = appearance.loc[playerID].G_ss
    except KeyError:
        return rc
    if first_base > shortstop:
        rc = 2
    elif shortstop > first_base:
        rc = 1

    return rc

# Add new column for if player is first base, short stop, or none
batting_recent = batting[batting.yearID > 1994]
app_gb = app.groupby('playerID').sum()
pos_series = batting_recent.playerID.apply(first_or_short, args=(app_gb,))

# Group by new position indicator
